import cv2
import time
import psutil
from src.config import Config
from src.camera import CameraStream
from src.detector import YOLODetector
from src.zones import ZoneManager
from src.monitor import CashRegisterMonitor
from src.display import FrameAnnotator
from src.transaction_manager import TransactionManager
from src.frame_processor import FrameProcessor

class AppFactory:
    @staticmethod
    def create_app():
        config = Config()
        
        # üî• OPTIMIZACI√ìN: Configuraci√≥n autom√°tica basada en hardware
        hardware_config = AppFactory._detect_hardware_capabilities()
        config = AppFactory._apply_hardware_optimizations(config, hardware_config)
        
        # First create transaction manager con configuraci√≥n optimizada
        detector = YOLODetector(config.MODEL_PATH, frame_rate=config.MAX_FPS, config=config)
        model_names = detector.model.names
        transaction_manager = TransactionManager(model_names, config, detector)
        
        # Create camera with optimized settings
        camera = CameraStream(
            config.USERNAME, config.PASSWORD, config.IP, config.PORT, config.CHANNEL,
            use_video_file=config.USE_VIDEO_FILE_FOR_CAMERA, video_path=config.VIDEO_FILE_PATH,
            transaction_manager=transaction_manager
        )

        # Update detector with actual camera FPS (pero limitado)
        actual_fps = min(camera.get_fps(), config.MAX_FPS)
        detector = YOLODetector(config.MODEL_PATH, frame_rate=actual_fps, config=config)
        
        zone_manager = ZoneManager(model_names, config)
        cash_register_monitor = CashRegisterMonitor(model_names, config.CASH_REGISTER_CLASS_NAME)
        annotator = FrameAnnotator(config)
        
        frame_processor = FrameProcessor(
            detector, zone_manager, cash_register_monitor, transaction_manager, annotator, config
        )
        
        return CajeroClienteApp(camera, frame_processor, annotator, config)

    @staticmethod
    def _detect_hardware_capabilities():
        """Detectar capacidades del hardware"""
        cpu_count = psutil.cpu_count()
        memory_gb = psutil.virtual_memory().total / (1024**3)
        
        # Detectar Raspberry Pi
        is_raspberry = False
        try:
            with open('/proc/cpuinfo', 'r') as f:
                if 'Raspberry' in f.read():
                    is_raspberry = True
        except:
            pass
            
        return {
            'cpu_count': cpu_count,
            'memory_gb': memory_gb,
            'is_raspberry': is_raspberry,
            'is_low_end': memory_gb < 2 or cpu_count < 4 or is_raspberry
        }

    @staticmethod
    def _apply_hardware_optimizations(config, hardware_config):
        """Aplicar optimizaciones basadas en hardware detectadas en runtime"""
        # Las optimizaciones principales ya est√°n en Config.__init__()
        # Este m√©todo puede a√±adir ajustes adicionales si es necesario
        return config

class CajeroClienteApp:
    def __init__(self, camera, frame_processor, annotator, config):
        self.camera = camera
        self.frame_processor = frame_processor
        self.annotator = annotator
        self.config = config
        
        # üî• OPTIMIZACI√ìN: Frame skipping variables
        self.frame_skip_counter = 0
        self.process_every_n_frames = getattr(config, 'PROCESS_EVERY_N_FRAMES', 1)
        
        # üî• OPTIMIZACI√ìN: Control de timing
        self.last_process_time = time.time()
        self.min_process_interval = 1.0 / getattr(config, 'MAX_FPS', 30)
        
        # üî• OPTIMIZACI√ìN: Cache para √∫ltimo frame procesado
        self.last_processed_result = None
        
        # üî• OPTIMIZACI√ìN: Estad√≠sticas de rendimiento
        self.performance_stats = {
            'frames_total': 0,
            'frames_processed': 0,
            'start_time': time.time(),
            'last_stats_time': time.time()
        }
        
        print(f"üöÄ Frame Processing: Procesando 1 de cada {self.process_every_n_frames} frames")
        print(f"üéØ Target FPS: {getattr(config, 'MAX_FPS', 30)}, Min interval: {self.min_process_interval*1000:.1f}ms")

    def run(self):
        try:
            self.camera.connect()
            
            # üî• OPTIMIZACI√ìN: FPS adaptativos limitados
            camera_fps = self.camera.get_fps()
            target_fps = min(camera_fps, getattr(self.config, 'MAX_FPS', 30))
            frame_delay = 1.0 / target_fps if target_fps > 0 else 1.0 / 30.0
            last_frame_time = time.time()
            
            print(f"üéØ Iniciando con FPS objetivo: {target_fps:.1f} (c√°mara: {camera_fps:.1f})")
            
            while True:
                current_time = time.time()
                self.performance_stats['frames_total'] += 1
                
                try:
                    frame = self.camera.read_frame()
                    
                    # üî• OPTIMIZACI√ìN CR√çTICA: Frame Skipping Logic
                    should_process = self._should_process_frame(current_time)
                    
                    if should_process:
                        self.performance_stats['frames_processed'] += 1
                        
                        # üî• OPTIMIZACI√ìN: Redimensionar frame si es muy grande
                        frame = self._optimize_frame_size(frame)
                        
                        # Procesar frame
                        annotated_frame = self.frame_processor.process_frame(frame, self.camera)
                        self.last_processed_result = annotated_frame
                        self.last_process_time = current_time
                        
                    else:
                        # üî• OPTIMIZACI√ìN: Usar √∫ltimo resultado si no procesamos
                        annotated_frame = self.last_processed_result if self.last_processed_result is not None else frame
                        
                except ConnectionError as e:
                    print(f"üîå Error de c√°mara: {e}. Reintentando...")
                    self.camera.release()
                    time.sleep(1)
                    self.camera.connect()
                    continue
                
                # üî• OPTIMIZACI√ìN: Mostrar solo si est√° habilitado
                if getattr(self.config, 'SHOW_ANNOTATIONS', True):
                    self.annotator.show_frame('DETECCION CLIENTE - CAJERO', annotated_frame)
                
                # üî• OPTIMIZACI√ìN: Control de velocidad mejorado
                if self.camera.use_video_file:
                    elapsed = time.time() - last_frame_time
                    if elapsed < frame_delay:
                        time.sleep(frame_delay - elapsed)
                    last_frame_time = time.time()
                
                # üî• OPTIMIZACI√ìN: Mostrar estad√≠sticas cada 100 frames
                if self.performance_stats['frames_total'] % 100 == 0:
                    self._print_performance_stats()
                
                if cv2.waitKey(1) & 0xFF == ord('q'):
                   break
                    
        except Exception as e:
            print(f"‚ùå Error en la aplicaci√≥n: {str(e)}")
            
        finally:
            self.camera.release()
            cv2.destroyAllWindows()
            self._print_final_stats()

    def _should_process_frame(self, current_time):
        """üî• L√ìGICA DE FRAME SKIPPING OPTIMIZADA"""
        # ‚úÖ REGLA 1: Procesar cada N frames
        self.frame_skip_counter += 1
        if self.frame_skip_counter < self.process_every_n_frames:
            return False
            
        # ‚úÖ REGLA 2: Respetar intervalo m√≠nimo de tiempo
        if current_time - self.last_process_time < self.min_process_interval:
            return False
        
        # ‚úÖ RESETEAR contador y procesar
        self.frame_skip_counter = 0
        return True

    def _optimize_frame_size(self, frame):
        """üî• OPTIMIZACI√ìN: Redimensionar frame si es necesario"""
        height, width = frame.shape[:2]
        
        # L√≠mites basados en configuraci√≥n de hardware
        max_width = 1280 if getattr(self.config, 'MAX_FPS', 30) >= 25 else 640
        
        if width > max_width:
            new_width = max_width
            new_height = int(height * (new_width / width))
            frame = cv2.resize(frame, (new_width, new_height), interpolation=cv2.INTER_LINEAR)
            
        return frame

    def _print_performance_stats(self):
        """üî• MOSTRAR ESTAD√çSTICAS DE RENDIMIENTO"""
        current_time = time.time()
        elapsed = current_time - self.performance_stats['start_time']
        
        if elapsed > 0:
            fps_total = self.performance_stats['frames_total'] / elapsed
            fps_processed = self.performance_stats['frames_processed'] / elapsed
            skip_rate = ((self.performance_stats['frames_total'] - self.performance_stats['frames_processed']) / self.performance_stats['frames_total']) * 100 if self.performance_stats['frames_total'] > 0 else 0
            
            # üî• OBTENER USO DE RECURSOS
            try:
                process = psutil.Process()
                cpu_percent = process.cpu_percent()
                memory_mb = process.memory_info().rss / 1024 / 1024
            except:
                cpu_percent = 0
                memory_mb = 0
            
            print(f"üìä RENDIMIENTO | FPS: {fps_total:.1f} total, {fps_processed:.1f} procesados | "
                  f"Skip: {skip_rate:.1f}% | CPU: {cpu_percent:.1f}% | RAM: {memory_mb:.1f}MB")
        
        self.performance_stats['last_stats_time'] = current_time

    def _print_final_stats(self):
        """üî• ESTAD√çSTICAS FINALES AL CERRAR"""
        elapsed = time.time() - self.performance_stats['start_time']
        if elapsed > 0:
            fps_avg = self.performance_stats['frames_processed'] / elapsed
            total_frames = self.performance_stats['frames_total']
            processed_frames = self.performance_stats['frames_processed']
            
            print("\n" + "="*50)
            print("üìä ESTAD√çSTICAS FINALES DE SESI√ìN")
            print("="*50)
            print(f"‚è±Ô∏è  Duraci√≥n sesi√≥n: {elapsed:.1f} segundos")
            print(f"üé¨ Frames totales: {total_frames}")
            print(f"üîÑ Frames procesados: {processed_frames}")
            print(f"üìà FPS promedio: {fps_avg:.1f}")
            print(f"üéØ Eficiencia: {(processed_frames/total_frames)*100:.1f}%" if total_frames > 0 else "üéØ Eficiencia: 0%")
            print("="*50)

if __name__ == "__main__":
    app = AppFactory.create_app()
    app.run()